CS 2233
Quest 2 â€“ The Forest Itself
Due: Wednesday, Oct. 16th, 2013, 11:59 PM
(750 xp)

Preliminary
Implement a Binary Search Tree ADT with the ability to optionally enforce the AVL balancing property. 
You may use any data structures text in C/C#/C++/Java as a reference, but you must include citations in 
the code and in your submitted supplement. Insert the following numbers (in this order) into your
binary search tree:

77, 29, 23, 19, 37, 43, 26, 55, 36, 16, 21, 23, 24, 7, 51, 20, 2, 9, 13, 87, 52, 86, 21, 15, 29, 6, 54, 55, 77, 88

Questions
Step 1: Have your program compute the average computational effort (ACE) and maximum height level 
of the BST (non-AVL) and record the results. (ACE: The average number of comparisons needed to locate 
an arbitrary element of the binary tree).

BST ace = 4
BST height = 9
AVL ace = 3
AVL height = 6

Step 2: What are the pre-, post-, and in-order traversals of this tree? (Please write the sequences 
below.)

BST:

Pre:
77 29 23 19 16 7 2 6 9 13 15 21 20 26 24 37 36 43 55 51 52 54 87 86 88
Post:
6 2 15 13 9 7 16 20 21 19 24 26 23 36 54 52 51 55 43 37 29 86 88 87 77
In:
2 6 7 9 13 15 16 19 20 21 23 24 26 29 36 37 43 51 52 54 55 77 86 87 88

Step 3: Clear the tree and repeat the above data entry sequence, this time with the AVL balancing 
enabled.

Step 4: Have your program re-compute the ACE and max height for the new tree and record the results.
AVL ace = 3
AVL height = 6
Step 5: Again, write the pre-, post-, and in-order traversals of this new tree.
AVL:

Pre:
29 19 13 7 2 6 9 16 15 23 21 20 26 24 55 43 37 36 52 51 54 86 77 87 88
Post:
6 2 9 7 15 16 13 20 21 24 26 23 19 36 37 51 54 52 43 77 88 87 86 55 29
In:
2 6 7 9 13 15 16 19 20 21 23 24 26 29 36 37 43 51 52 54 55 77 86 87 88

Step 6: Record the balance level of every node (implement a Print() method for your ADT and attack the 
console output after calling your Print() method).
AVL balances: Node Data : Balance level 
2 : 1
6 : 0
7 : -1
9 : 0
13 : -1
15 : 0
16 : -1
19 : -1
20 : 0
21 : -1
23 : 0
24 : 0
26 : -1
29 : -1
36 : 0
37 : -1
43 : 0
51 : 0
52 : 0
54 : 0
55 : 0
77 : 0
86 : 1
87 : 1
88 : 0

Notes: Be careful not to allow multiple copies of a value in the tree.

Grading:
Implements the Binary Search Tree ADT and compiles: 200 xp
Implements the AVL balancing property: 200 xp
Code is well formatted: 150 xp
Questions (Steps 1-6) answered: 200 xp